#define DEBUG_TYPE "BlkLoopPass" 

#include <llvm/Pass.h>
#include <llvm/IR/Function.h> 
#include <llvm/Analysis/LoopInfo.h>
#include <llvm/Support/raw_ostream.h> 

#include <map>
#include <iostream>

using namespace llvm;

namespace{
	struct	BlkLoppPass:public FunctionPass{
		static	char ID;
		BlkLoppPass():FunctionPass(ID){}
		
		void getAnalysisUsage(AnalysisUsage &AU) const{
			AU.addRequired<LoopInfoWrapperPass>();
			AU.setPreservesAll();
		}
		
		virtual	bool runOnFunction(Function &F){
			LoopInfo &LI = getAnalysis<LoopInfoWrapperPass>().getLoopInfo(); 
			int	loopCounter = 0;
			errs() << F.getName() + "\n";
			for (LoopInfo::iterator i = LI.begin(), e = LI.end(); i != e; ++i) {
				Loop *L = *i;
				int bbCounter = 0;
				loopCounter++;
				for(Loop::block_iterator bb = L->block_begin(); bb != L->block_end(); ++bb){
					bbCounter+=1;
				}
				errs() << "Loop ";
				errs() << loopCounter;
				errs() << ": #BBs = ";
				errs() << bbCounter;
				errs() << "\n";
			}
			return(false);
		}
	};
}

char BlkLoppPass::ID = 0; static RegisterPass<BlkLoppPass> X("bbloop", "Count the number of BBs inside each loop");
